package Lab06;

public class Regression {
	public Regression() {
		start();
	}
	public void start(){
		double[] ycp = new double[14];
		double[] mx = new double[10];
		double my = 0;
		double[] A = new double[10];
		double[][] a = new double[10][10];
		double b0 =0;
		double b1 =0;
		double b2 =0;
		double b3 =0;
		double b4 =0;
		double b5 =0;
		double b6 =0;
		double b7 =0;
		double b8 =0;
		double b9 =0;
		double b10 =0;
		
		double[][] matrixPlan = {	 {-10,20,-10,100,400,100,-200,100,-200,2000},		
					{-10,60,10,100,3600,100,-600,-100,600,-6000},		
					{50,20,10,2500,400,100,1000,500,200,10000},		
					{50,60,-10,2500,3600,100,3000,-500,-600,-30000},		
					{-10,20,10,100,400,100,-200,-100,200,-2000},		
					{-10,60,-10,100,3600,100,-600,100,-600,6000},		
					{50,20,-10,2500,400,100,1000,-500,-200,-10000},		
					{50,60,10,2500,3600,100,3000,500,600,30000},		
					{-31.9,40,0,1017.61,1600,0,1276,0,0,0},		
					{71.9,40,0,5169.61,1600,0,2876,0,0,0},		
					{20,5.4,0,400,29.16,0,108,0,0,0},		
					{20,74.6,0,400,5565.16,0,1492,0,0,0},		
					{20,40,-17.3,400,1600,299.29,800,-346,692,-13840},		
					{20,40,17.3,400,1600,299.29,800,346,692,13840}};		
int[][] matrixPlanKoef = {{1,-1,-1,-1, 1, 1, 1,-1},
								  {1,-1, 1, 1,-1,-1, 1,-1},
								  {1, 1,-1, 1,-1, 1,-1,-1},
								  {1, 1, 1,-1, 1,-1,-1,-1},
								  {1,-1,-1, 1, 1,-1,-1, 1},
								  {1,-1, 1,-1,-1, 1,-1, 1},
								  {1, 1,-1,-1,-1,-1, 1, 1},
								  {1, 1, 1, 1, 1, 1, 1, 1}};

		double[][] matrixOtklic = {{8939.4,	8934.2},
									{-31110.6,	-31115.3},
									{86437.4,	86433.4},
									{-107712.6,	-107713.6},
									{-9610.6,	-9615.6},
									{24719.4,	24717.4},
									{-20292.6,	-20290.6},
									{211337.4,	211339.4},
									{21217.053,	21220.053},
									{74728.893,	74725.871},
									{4809.732,	4807.732},
									{18545.932,	18548.547},
									{-55731.445,-55734.422},
									{88775.455,	88777.456}};

		

		
		System.out.println("Average function value (y):");
		for(int i=0; i< matrixOtklic.length; i++){
			for(int j=0; j<matrixOtklic[0].length;j++){
				ycp[i] += matrixOtklic[i][j];
			}
			ycp[i] /= matrixOtklic[0].length;
			System.out.println("Ycp"+(i+1)+" = "+ycp[i]);
		}
		Kohren koh = new Kohren(ycp, matrixOtklic);
		//MX
		for(int i=0; i< matrixPlan[0].length; i++){
			for(int j=0; j<matrixPlan.length;j++){
				mx[i] += matrixPlan[j][i];
			}
			mx[i] /= matrixPlan.length;
			System.out.println("MX"+(i+1)+" = "+mx[i]);
		}
		
		//MY
		for(int i=0; i<ycp.length; i++){
			my += ycp[i];
		}
		System.out.println("MY = "+(my /= ycp.length));
		
		//A
		for(int i=0; i<matrixPlan[0].length; i++){
			for(int j=0; j<matrixPlan.length; j++){
				A[i] +=matrixPlan[j][i]*ycp[j];
			}
			A[i] /= matrixPlan.length;
			System.out.println("A"+(i+1)+" = "+A[i]);
		}
		
		//a

		for (int i=0; i<a.length; i++){
			for (int j=0; j<a.length; j++){
				for (int k=0; k<matrixPlan.length; k++){
					a[j][i]+=matrixPlan[k][i]*matrixPlan[k][j];
				}
				a[j][i] /= matrixPlan.length;
			}
		}

		for(int i=0; i<a.length; i++){
			for(int j=0; j<a[0].length; j++){
				System.out.println("a["+(i+1)+"]["+(j+1)+"] = "+a[i][j]);
			}
		}
		
		//determinant
		double[][] divisor = {{1, mx[0], mx[1], mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
					{mx[0], a[0][0], a[0][1], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
					{mx[1], a[0][1], a[1][1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
					{mx[2], a[0][2], a[1][2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
					{mx[3], a[0][3], a[1][3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
					{mx[4], a[0][4], a[1][4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
					{mx[5], a[0][5], a[1][5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
					{mx[6], a[0][6], a[1][6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
					{mx[7], a[0][7], a[1][7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
					{mx[8], a[0][8], a[1][8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
					{mx[9], a[0][9], a[1][9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB0 = {{my, mx[0], mx[1], mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{A[0], a[0][0], a[0][1], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{A[1], a[0][1], a[1][1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{A[2], a[0][2], a[1][2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{A[3], a[0][3], a[1][3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{A[4], a[0][4], a[1][4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{A[5], a[0][5], a[1][5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{A[6], a[0][6], a[1][6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{A[7], a[0][7], a[1][7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{A[8], a[0][8], a[1][8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{A[9], a[0][9], a[1][9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB1 = {{1, my, mx[0], mx[1], mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], A[0], a[0][1], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], A[1], a[1][1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], A[2], a[1][2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], A[3], a[1][3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], A[4], a[1][4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], A[5], a[1][5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], A[6], a[1][6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], A[7], a[1][7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], A[8], a[1][8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], A[9], a[1][9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};

		double[][] divB2 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB3 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB4 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB5 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB6 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB7 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB8 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB9 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
		
		double[][] divB10 = {{1, mx[0], my, mx[2], mx[3], mx[4], mx[5], mx[6], mx[7],  mx[8],  mx[9]},
				{mx[0], a[0][0], A[0], a[0][2], a[0][3], a[0][4], a[0][5], a[0][6], a[0][7], a[0][8], a[0][9]},
				{mx[1], a[0][1], A[1], a[2][1], a[3][1], a[4][1], a[5][1], a[6][1], a[7][1], a[8][1], a[9][1]},
				{mx[2], a[0][2], A[2], a[2][2], a[3][2], a[4][2], a[5][2], a[6][2], a[7][2], a[8][2], a[9][2]},
				{mx[3], a[0][3], A[3], a[2][3], a[3][3], a[4][3], a[5][3], a[6][3], a[7][3], a[8][3], a[9][3]},
				{mx[4], a[0][4], A[4], a[2][4], a[3][4], a[4][4], a[5][4], a[6][4], a[7][4], a[8][4], a[9][4]},
				{mx[5], a[0][5], A[5], a[2][5], a[3][5], a[4][5], a[5][5], a[6][5], a[7][5], a[8][5], a[9][5]},
				{mx[6], a[0][6], A[6], a[2][6], a[3][6], a[4][6], a[5][6], a[6][6], a[7][6], a[8][6], a[9][6]},
				{mx[7], a[0][7], A[7], a[2][7], a[3][7], a[4][7], a[5][7], a[6][7], a[7][7], a[8][7], a[9][7]},
				{mx[8], a[0][8], A[8], a[2][8], a[3][8], a[4][8], a[5][8], a[6][8], a[7][8], a[8][8], a[9][8]},
				{mx[9], a[0][9], A[9], a[2][9], a[3][9], a[4][9], a[5][9], a[6][9], a[7][9], a[8][9], a[9][9]}};
	
		b0 = determinant(divB0)/determinant(divisor);
		b1 = determinant(divB1)/determinant(divisor);
		b2 = determinant(divB2)/determinant(divisor);
		b3 = determinant(divB3)/determinant(divisor);
		b4 = determinant(divB4)/determinant(divisor);
		b5 = determinant(divB5)/determinant(divisor);
		b6 = determinant(divB6)/determinant(divisor);
		b7 = determinant(divB7)/determinant(divisor);
		b8 = determinant(divB7)/determinant(divisor);
		b9 = determinant(divB7)/determinant(divisor);
		b10 = determinant(divB7)/determinant(divisor);
		System.out.println("B0 = "+b0);
		System.out.println("B1 = "+b1);
		System.out.println("B2 = "+b2);
		System.out.println("B3 = "+b3);
		System.out.println("B4 = "+b4);
		System.out.println("B5 = "+b5);
		System.out.println("B6 = "+b6);
		System.out.println("B7 = "+b7);
		System.out.println("B8 = "+b8);
		System.out.println("B9 = "+b9);
		System.out.println("B10 = "+b10);

		System.out.println("y = "+b0+"+"+b1+"*x1+"+b2+"*x2+"+b3+"*x3+"+b4+"*x1*x2+"+b5+"*x1*x3+"+b6+"*x2*x3+"+b7+"x1*x2*x3");
		
		for(int i=0; i<matrixPlan.length; i++){
			System.out.println("Ycp"+i+" = "+(b0+b1*matrixPlan[i][0]+b2*matrixPlan[i][1]+b3*matrixPlan[i][2]+
					b4*matrixPlan[i][3]+b5*matrixPlan[i][4]+b6*matrixPlan[i][5]+b7*matrixPlan[i][6]));
		}
			
		Student stud = new Student(b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10, matrixPlan, ycp, matrixOtklic);
		Fisher fish = new Fisher(b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,ycp,matrixOtklic[0].length,matrixPlan.length,stud.getSb(), matrixPlan, stud.getDi());
	}
	
	public static double determinant(double[][] a) {
		final double eps = 1e-10;
		int n = a.length;
		double res = 1;
		boolean[] used = new boolean[n];
		for (int i = 0; i < n; i++) {
		int p;
		for (p = 0; p < n; p++)
			if (!used[p] && Math.abs(a[p][i]) > eps)
				break;
		    if (p >= n)
		    	return 0;
		    res *= a[p][i];
		    used[p] = true;
		    double z = 1 / a[p][i];
		    for (int j = 0; j < n; j++)
		    	a[p][j] *= z;
		    for (int j = 0; j < n; ++j)
		    	if (j != p) {
		    		z = a[j][i];
		    		for (int k = 0; k < n; ++k)
		    			a[j][k] -= z * a[p][k];
		    	}
		}
		return res;
	}
}

